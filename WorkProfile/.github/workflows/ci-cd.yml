name: Work Profile CI/CD Pipeline (GHCR)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  IMAGE_NAME: workprofile
  REGISTRY: ghcr.io

jobs:
  build-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      tag: ${{ steps.generate-tag.outputs.tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'   

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pytest flake8

      - name: Run unit tests
        run:  |
          echo "=== Running Unit Tests ==="
          pytest --disable-warnings tests/test_app.py || (echo "❌ Unit tests failed" && exit 1)
          echo "✅ Unit tests passed"

      - name: Generate image tag
        id: generate-tag
        run: |
          TAG="v1.0.${{ github.run_number }}"
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Generated tag: ${TAG}"

  e2e-tests:
    needs: build-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install requests

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.38.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose version    

      - name: Build and start full stack with Docker Compose
        run: |
          docker-compose up -d --build
          sleep 50  
      
      - name: Test "/" endpoint
        run: |
          curl --fail http://localhost:8080/ || exit 1

      - name: Test "/health" endpoint
        run: |
          curl --fail http://localhost:8080/health || exit 1

      - name: Run E2E tests
        run: |
          python tests/e2e_tests.py

      - name: Docker Compose Logs (on failure)
        if: failure()
        run: |
          docker-compose logs workprofile
          docker-compose logs mysql

      - name: Stop and clean up docker-compose environment
        run: |
          docker-compose down --volumes --remove-orphans     
  
  push-image:
    needs: 
      - build-test
      - e2e-tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build Docker image
        run: |
          TAG="${{ needs.build-test.outputs.tag }}"
          docker build -t ghcr.io/${{ github.repository_owner }}/workprofile:latest \
                      -t ghcr.io/${{ github.repository_owner }}/workprofile:${TAG} .

      - name: Push Docker images
        run: |
          TAG="${{ needs.build-test.outputs.tag }}"
          docker push ghcr.io/${{ github.repository_owner }}/workprofile:latest
          docker push ghcr.io/${{ github.repository_owner }}/workprofile:${TAG}
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.build-test.outputs.tag }}
          name: Release ${{ needs.build-test.outputs.tag }}
          body: |
            - Auto-generated release
            - Image tag: ${{ needs.build-test.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-k8s:
    needs: 
      - build-test
      - push-image
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: workprofile
      REGISTRY: ghcr.io

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create kind cluster for testing
        run: |
          echo "=== CD: Creating Test Environment ==="
          # Install kind
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind
          
          # Create cluster
          kind create cluster --wait 300s
          
          echo "Test cluster created successfully"
          kubectl cluster-info
          kubectl get nodes
      - name: Create imagePullSecret for GHCR
        run: |
          kubectl create secret docker-registry ghcr \
            --docker-server=ghcr.io \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GHCR_TOKEN }} \
            --docker-email=example@example.com

      - name: Deploy MySQL infrastructure
        run: |
          echo "=== CD: Deploying MySQL Infrastructure ==="
        
          echo "Creating MySQL Secret..."
          kubectl apply -f k8s/mysql-secret.yaml

          echo "Creating ConfigMap from init.sql..."
          kubectl create configmap mysql-initdb-config --from-file=init.sql=init.sql
        
          echo "Deploying MySQL StatefulSet..."
          kubectl apply -f k8s/mysql-statefulset.yaml
          kubectl apply -f k8s/mysql-service.yaml
        
          echo "Waiting for MySQL to be ready..."
          kubectl wait --for=condition=ready pod/mysql-0 --timeout=300s
        
          echo "MySQL deployment successful"
          kubectl get pods,svc,statefulset -l app=mysql
          kubectl get pvc

      - name: Deploy Workprofile application
        run: |
          TAG="${{ needs.build-test.outputs.tag }}"
          REPO_OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          IMAGE="${{ env.REGISTRY }}/${REPO_OWNER_LOWER}/${{ env.IMAGE_NAME }}:${TAG}"
        
          echo "=== CD: Deploying Workprofile Application ==="
          echo "Updating deployment with image: ${IMAGE}"
          sed -i "s|IMAGE_PLACEHOLDER|${IMAGE}|g" k8s/workprofile-deployment.yaml
        
          echo "Creating Workprofile ConfigMap..."
          kubectl apply -f k8s/workprofile-configmap.yaml
        
          echo "Deploying Workprofile..."
          kubectl apply -f k8s/workprofile-deployment.yaml
          kubectl apply -f k8s/workprofile-service.yaml
        
          echo "Waiting for Workprofile to be ready..."
          kubectl wait --for=condition=available deployment/workprofile --timeout=300s
          kubectl wait --for=condition=ready pod -l app=workprofile --timeout=300s
        
          echo "Workprofile deployment successful"
          kubectl get pods,svc,deployment -l app=workprofile
  
      - name: Verify production-ready stack
        run: |
          echo "=== CD: Verifying Production-Ready Stack ==="
          
          echo "Overall cluster status:"
          kubectl get all
          echo ""
          
          echo "Checking Secrets and ConfigMaps:"
          kubectl get secrets,configmaps
          echo ""
          
          echo "Testing MySQL connectivity with credentials from Secret..."
          kubectl run mysql-client --image=mysql:5.7 -it --rm --restart=Never -- \
            mysql -h mysql-service -u flaskapp -pflaskapp -D exampleDb -e "SHOW DATABASES;"
          echo "MySQL connectivity with Secrets: SUCCESS"
          echo ""
          
          echo "Verifying StatefulSet and PVC:"
          kubectl describe statefulset mysql
          kubectl get pvc
          echo ""
          
          echo "Testing EntryTracker application..."
          kubectl port-forward deployment/workprofile 5000:5000 &
          PORT_FORWARD_PID=$!
          
          sleep 20
          
          if curl -f http://localhost:5000/; then
            echo "Workprofile application: SUCCESS"
          else
            echo "Workprofile application test failed"
            echo "Application logs:"
            kubectl logs -l app=workprofile --tail=20
            echo "MySQL logs:"
            kubectl logs mysql-0 --tail=20
            exit 1
          fi
          
          kill $PORT_FORWARD_PID
          echo ""
          
          echo "Checking resource limits:"
          kubectl describe pod -l app=workprofile | grep -A 5 "Limits:"
          kubectl describe pod mysql-0 | grep -A 5 "Limits:"
          echo ""
          
          echo "Production-ready stack verification: SUCCESS"
          
      - name: Display deployment instructions
        run: |
          TAG="${{ needs.build-test.outputs.tag }}"
          REPO_OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          
          echo "=== Production-Ready CI/CD Pipeline Complete ==="
          echo ""
          echo "CI (Continuous Integration) Results:"
          echo "   Workprofile image built: ghcr.io/${REPO_OWNER_LOWER}/${{ env.IMAGE_NAME }}:${TAG}"
          echo "   Image pushed to GHCR: ghcr.io/${REPO_OWNER_LOWER}/${{ env.IMAGE_NAME }}:latest"
          echo "   Registry URL: https://github.com/${{ github.repository }}/pkgs/container/${{ env.IMAGE_NAME }}"
          echo ""
          echo "CD (Continuous Deployment) Results:"
          echo "   MySQL StatefulSet deployed with 2Gi persistent storage"
          echo "   Kubernetes Secrets configured for secure credential management"
          echo "   Workprofile deployed with ConfigMaps and resource limits"
          echo "   Production-ready health checks verified"
          echo "   Multi-tier stack tested and confirmed working"
          echo "   Ready for manual production deployment"
          echo ""
          echo "=== Manual Deployment to Killercoda ==="
          echo ""
          echo "Your production-ready stack is ready! To deploy to Killercoda:"
          echo ""
          echo "1. In your Killercoda terminal, clone and prepare:"
          echo "   git clone https://github.com/${{ github.repository }}.git"
          echo "   cd WorkProfile"
          echo "   sed -i 's|IMAGE_PLACEHOLDER|ghcr.io/${REPO_OWNER_LOWER}/${{ env.IMAGE_NAME }}:${TAG}|g' k8s/workprofile-deployment.yaml"
          echo ""
          echo "2. Deploy MySQL infrastructure first:"
          echo "   kubectl apply -f k8s/mysql-secret.yaml"
          echo "   kubectl create configmap mysql-initdb-config --from-file=init.sql=init.sql"
          echo "   kubectl apply -f k8s/mysql-statefulset.yaml"
          echo "   kubectl apply -f k8s/mysql-service.yaml"
          echo "   kubectl wait --for=condition=ready pod/mysql-0 --timeout=300s"
          echo ""
          echo "3. Deploy Workprofile application:"
          echo "   kubectl apply -f k8s/workprofile-configmap.yaml"
          echo "   kubectl apply -f k8s/workprofile-deployment.yaml"
          echo "   kubectl apply -f k8s/workprofile-service.yaml"
          echo "   kubectl wait --for=condition=available deployment/workprofile --timeout=300s"
          echo ""
          echo "4. Get the NodePort and access your application:"
          echo "   kubectl get service workprofile-service"
          echo "   # Note the NodePort (30000-32767 range)"
          echo "   # Use Killercoda Traffic Port Accessor with that port"
          echo ""
          echo "5. Test production features:"
          echo "   # Test MySQL connectivity:"
          echo "   kubectl run mysql-client --image=mysql:5.7 -it --rm --restart=Never -- \\"
          echo "     mysql -h mysql-service -u flaskapp -pflaskapp -D exampleDb -e \"SHOW DATABASES;\""
          echo ""
          echo "   # Test data persistence:"
          echo "   kubectl delete pod mysql-0"
          echo "   kubectl wait --for=condition=ready pod/mysql-0 --timeout=300s"
          echo "   # Verify your data still exists"
          echo ""
          echo "   # Check resource limits:"
          echo "   kubectl describe pod -l app=workprofile"
          echo ""
          echo "=== Production Architecture Deployed ==="
          echo "- MySQL StatefulSet: Stable pod identity with 2Gi persistent storage"
          echo "- Kubernetes Secrets: Secure credential management (no plain text passwords)"
          echo "- ConfigMaps: Separated configuration from application code"
          echo "- Resource Limits: CPU and memory constraints for predictable performance"
          echo "- Health Checks: Liveness and readiness probes for reliability"
          echo "- NodePort Service: External access with automatic port assignment"
          echo "- Enterprise Patterns: Production-ready deployment architecture"